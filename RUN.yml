name: RUN
 
on:

  workflow_run:
    workflows: ["BUILD"]
    types: [completed]

jobs:

  RUN:

    runs-on: [ self-hosted, docker, linux, server-tests ]

    if: ${{ github.event.workflow_run.conclusion == 'success' }}


    steps:

      - name: Clone tests repo
        uses: actions/checkout@v2
        with:
         repository: company/ci-tests
         ref: master
         clean: 'true'
     

      - name: Get tag without artifacts
        uses: actions/github-script@v3
        id: get-tag
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          debug: true
          script: |
             const res = await github.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{github.event.workflow_run.id}}
             })
               let res3 = ""
               for (let j = 0; j < res.data.total_count; j++){
                
                if (res.data.artifacts[j].name == "tag") {
                res3 = JSON.stringify(res.data.artifacts[j].id);
                }            
              }
             const download_artifact_url = await github.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: res3,
                archive_format: 'zip'
             })
             var fs = require('fs');
             fs.writeFileSync('${{github.workspace}}/tag.zip', Buffer.from(download_artifact_url.data));
             core.setOutput('id_run', res3)


      - name: RUN tests
        shell: bash
        run: |
          docker run --user $(id -u):$(id -g) --rm -v ${PWD}:/tmp/unzip:rw dockerqa/unzip /tmp/unzip/tag.zip -d /tmp/unzip
          chmod 644 tag.csv
          TAG=$(cat tag.csv)
          echo "TAG=" "$TAG"
          echo "RUN_ID=" "${{ steps.get-tag.outputs.id_run }}"
          run_tests.sh $TAG


  On_failure_build:

    runs-on: [ self-hosted, docker, linux ]
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:

      - name: Exit error
        run: exit 10
